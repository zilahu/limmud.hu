<?php

/**
 * @file
 * This is an example outlining how a module can define blocks that can be
 * displayed on various pages of a site, or how to alter blocks provided by
 * other modules.
 */

/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 */
function limmudhelper_block_info() {
  // This hook returns an array, each component of which is an array of block
  // information. The array keys are the 'delta' values used in other block
  // hooks.

  // The required block information is a block description, which is shown
  // to the site administrator in the list of possible blocks. You can also
  // provide initial settings for block weight, status, etc.


  // This sample shows how to provide default settings. In this case we'll
  // enable the block in the first sidebar and make it visible only on
  // 'node/*' pages. See the hook_block_info() documentation for these.
  $blocks['eloadasnapok_dow'] = array(
    'info' => t('Limmud: előadásnapok hét napjaival block'),
    'status' => TRUE,
  );

  $blocks['eloadasnapok_date'] = array(
    'info' => t('Limmud: előadásnapok dátummal block'),
    'status' => TRUE,
  );
  
  return $blocks;
}


/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks themselves.
 */
function limmudhelper_block_view($delta = '') {
  //The $delta parameter tells us which block is being requested.
  switch ($delta) {
    case 'eloadasnapok_date':
      // The subject is displayed at the top of the block. Note that it
      // should be passed through t() for translation. The title configured
      // for the block using Drupal UI supercedes this one.
      $block['subject'] = t('Presentations by date');
      // The content of the block is typically generated by calling a custom
      // function.
      $block['content'] = limmudhelper_contents($delta);
      break;
    case 'eloadasnapok_dow':
      $block['subject'] = t('Presentations by day of week');
      $block['content'] = limmudhelper_contents($delta);
      break;
  }
  return $block;
}

/*
 * SQL
 * SELECT DISTINCT DATE_FORMAT(t.field_presentation_time_value, '%W')  
 *   FROM node n,  
 *        field_data_field_presentation_time t 
 *  WHERE n.nid = t.entity_id 
 *    AND n.type = 'konferencia_program' 
 *    AND DATE_FORMAT(ADDTIME(t.field_presentation_time_value, SEC_TO_TIME(7200)), '%Y') = 2010
 * 
 */



/**
 * A module-defined block content function.
 */
function limmudhelper_contents($which_block) {
  $year = arg(1);
  $output = "";
  
  if (empty($year)) {
    $year = 2010;
  }
  
  switch ($which_block) {
    case 'eloadasnapok_date':
      // Modules would typically perform some database queries to fetch the
      // content for their blocks. Here, we'll just use the variable set in the
      // block configuration or, if none has set, a default value.
      // Block content can be returned in two formats: renderable arrays
      // (as here) are preferred though a simple string will work as well.
     
      
      return ;
    case 'eloadasnapok_dow':
      // It is possible that a block not have any content, since it is
      // probably dynamically constructed. In this case, Drupal will not display
      // the block at all. This block will not be displayed.
      $result = db_query("SELECT DISTINCT DATE_FORMAT(t.field_presentation_time_value, '%W') presentation_dow,
                                 DATE_FORMAT(t.field_presentation_time_value, '%Y-%m-%d') presentation_date
    	  										FROM {node} n,  
        												 {field_data_field_presentation_time} t 
   												 WHERE n.nid = t.entity_id 
     												 AND n.type = 'konferencia_program' 
     												 AND DATE_FORMAT(ADDTIME(t.field_presentation_time_value, SEC_TO_TIME(7200)), '%Y') = :year",
                  array(':year' => $year)
      );
      foreach ($result as $record) {
        $output .= l(t($record->presentation_dow), 'eloadasok/'.$record->presentation_date)." ";
      }
      return $output;
  }
}

