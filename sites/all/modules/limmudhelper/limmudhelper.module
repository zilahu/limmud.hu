<?php

/**
 * @file
 * This is an example outlining how a module can define blocks that can be
 * displayed on various pages of a site, or how to alter blocks provided by
 * other modules.
 */

/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 */
function limmudhelper_block_info() {
  // This hook returns an array, each component of which is an array of block
  // information. The array keys are the 'delta' values used in other block
  // hooks.

  // The required block information is a block description, which is shown
  // to the site administrator in the list of possible blocks. You can also
  // provide initial settings for block weight, status, etc.


  // This sample shows how to provide default settings. In this case we'll
  // enable the block in the first sidebar and make it visible only on
  // 'node/*' pages. See the hook_block_info() documentation for these.
  $blocks['eloadasnapok_dow'] = array(
    'info' => t('Limmud: előadásnapok hét napjaival block'),
    'status' => TRUE,
  );

  $blocks['eloadasnapok_date'] = array(
    'info' => t('Limmud: előadásnapok dátummal block'),
    'status' => TRUE,
  );
  
  return $blocks;
}


/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks themselves.
 */
function limmudhelper_block_view($delta = '') {
  //The $delta parameter tells us which block is being requested.
  switch ($delta) {
    case 'eloadasnapok_date':
      // The subject is displayed at the top of the block. Note that it
      // should be passed through t() for translation. The title configured
      // for the block using Drupal UI supercedes this one.
      $block['subject'] = t('Presentations by date');
      // The content of the block is typically generated by calling a custom
      // function.
      $block['content'] = limmudhelper_contents($delta);
      break;
    case 'eloadasnapok_dow':
      $block['subject'] = t('Presentations by day of week');
      $block['content'] = limmudhelper_contents($delta);
      break;
  }
  return $block;
}

/*
 * SQL
 * SELECT DISTINCT DATE_FORMAT(t.field_presentation_time_value, '%W')  
 *   FROM node n,  
 *        field_data_field_presentation_time t 
 *  WHERE n.nid = t.entity_id 
 *    AND n.type = 'konferencia_program' 
 *    AND DATE_FORMAT(ADDTIME(t.field_presentation_time_value, SEC_TO_TIME(7200)), '%Y') = 2010
 * 
 */



/**
 * A module-defined block content function.
 */
function limmudhelper_contents($which_block) {
  $year = arg(1);
  $output = "";
  
  if (empty($year)) {
    $year = 2010;
  }
  
  switch ($which_block) {
    case 'eloadasnapok_date':
      // Modules would typically perform some database queries to fetch the
      // content for their blocks. Here, we'll just use the variable set in the
      // block configuration or, if none has set, a default value.
      // Block content can be returned in two formats: renderable arrays
      // (as here) are preferred though a simple string will work as well.
     
      
      return ;
    case 'eloadasnapok_dow':
      // It is possible that a block not have any content, since it is
      // probably dynamically constructed. In this case, Drupal will not display
      // the block at all. This block will not be displayed.
      $result = db_query("SELECT DISTINCT DATE_FORMAT(t.field_presentation_time_value, '%W') presentation_dow,
                                 DATE_FORMAT(t.field_presentation_time_value, '%Y-%m-%d') presentation_date
    	  										FROM {node} n,  
        												 {field_data_field_presentation_time} t 
   												 WHERE n.nid = t.entity_id 
     												 AND n.type = 'konferencia_program' 
     												 AND DATE_FORMAT(ADDTIME(t.field_presentation_time_value, SEC_TO_TIME(7200)), '%Y') = :year",
                  array(':year' => $year)
      );
      foreach ($result as $record) {
        $output .= l(t($record->presentation_dow), 'eloadasok/'.$record->presentation_date)." ";
      }
      return $output;
  }
}

/**
 * Respond to a Webform submission being inserted.
 *
 * Note that this hook is called after a submission has already been saved to
 * the database. If needing to modify the submission prior to insertion, use
 * hook_webform_submission_presave().
 *
 * @param $node
 *   The Webform node on which this submission was made.
 * @param $submission
 *   The Webform submission that was just inserted into the database.
 */
function limmudhelper_webform_submission_insert($node, $submission) {
  if ($node->nid == 83 || $node->nid == 251 ) { // 83: magyar, 251: angol
    $mapping = _limmudhelper_webform_component_mapping($node);
    // watchdog('php', print_r($submission, true));
    // Személyes adatok sessionbe
    
    unset($_SESSION['limmud_ticket_data']);
    
    $_SESSION['limmud_ticket_data'] = array('vezeteknev' => $submission->data[$mapping['vezeteknev']]['value'][0],
                                            'keresztnev' => $submission->data[$mapping['keresztnev']]['value'][0],
                                            'telefonszam' => $submission->data[$mapping['telefonszam']]['value'][0],
                                            'email' => $submission->data[$mapping['email']]['value'][0],
                                            'submission_id' => $submission->sid,
    );
    
    /* Dalet felnő		237
     * Dalet gyerek 	243
     * Dalet manó		244 
     * Lamed felnőtt 	235
     * Lamed gyerek 	239
     * lamed Manó 		240
     * Mem felnőtt 		236
     * Mem gyerek 		241
     * Mem manó 			242
     */
    $lamed_felnott = $submission->data[$mapping['lamed_felnott']]['value'][0];
    $lamed_gyerek = $submission->data[$mapping['lamed_gyerek']]['value'][0];
    $lamed_mano = $submission->data[$mapping['lamed_mano']]['value'][0];
    
    $mem_felnott = $submission->data[$mapping['mem_felnott']]['value'][0];
    $mem_gyerek = $submission->data[$mapping['mem_gyerek']]['value'][0];
    $mem_mano = $submission->data[$mapping['mem_mano']]['value'][0];
    
    $dalet_felnott = $submission->data[$mapping['dalet_felnott']]['value'][0];
    $dalet_gyerek = $submission->data[$mapping['dalet_gyerek']]['value'][0];
    $dalet_mano = $submission->data[$mapping['dalet_mano']]['value'][0];
    
    if ($lamed_felnott > 0 ) {
      uc_cart_add_item(235,$lamed_felnott);
    }
    if ($lamed_gyerek > 0 ) {
      uc_cart_add_item(239,$lamed_gyerek);
    }
    if ($lamed_mano > 0 ) {
      uc_cart_add_item(240,$lamed_mano);
    }
    if ($mem_felnott > 0 ) {
      uc_cart_add_item(236,$mem_felnott);
    }
    if ($mem_gyerek > 0 ) {
      uc_cart_add_item(241,$mem_gyerek);
    }
    if ($mem_mano > 0 ) {
      uc_cart_add_item(242,$mem_mano);
    }
    if ($dalet_felnott > 0 ) {
      uc_cart_add_item(237,$dalet_felnott);
    }
    if ($lamed_gyerek > 0 ) {
      uc_cart_add_item(243,$dalet_gyerek);
    }
    if ($dalet_mano > 0 ) {
      uc_cart_add_item(244,$dalet_mano);
    }
  }
  
  if ($node->nid == 460 || $node->nid == 464) { // 460: 2012-es magyar 464: angol
    $mapping = _limmudhelper_webform_component_mapping($node);
    // watchdog('php', print_r($submission, true));
    // Személyes adatok sessionbe
    
    unset($_SESSION['limmud_ticket_data']);
    
    $_SESSION['limmud_ticket_data'] = array('vezeteknev' => $submission->data[$mapping['vezeteknev']]['value'][0],
                                            'keresztnev' => $submission->data[$mapping['keresztnev']]['value'][0],
                                            'telefonszam' => $submission->data[$mapping['telefonszam']]['value'][0],
                                            'email' => $submission->data[$mapping['email']]['value'][0],
                                            'submission_id' => $submission->sid,
    );
    
    /* Napijegy felnőtt 457
     * Napjegy gyerek 	458
     * Napjegy manó		459 
     * Napjegy család 	461
     */
    $nj_felnott = $submission->data[$mapping['NAPI_FELNOTT']]['value'][0];
    $nj_gyerek = $submission->data[$mapping['napi_gyerek']]['value'][0];
    $nj_mano = $submission->data[$mapping['napi_mano']]['value'][0];
    $nj_csalad = $submission->data[$mapping['csaladi_2_felnott_es_2_gyerek']]['value'][0];
    
    if ($nj_felnott > 0 ) {
      uc_cart_add_item(457,$nj_felnott);
    }
    if ($nj_gyerek > 0 ) {
      uc_cart_add_item(458,$nj_gyerek);
    }
    if ($nj_mano > 0 ) {
      uc_cart_add_item(459,$nj_mano);
    }
    if ($nj_csalad > 0 ) {
      uc_cart_add_item(461,$nj_csalad);
    }
  }
}

/**
 * 
 * Full ubercart billing adress from Webform data 
 * @param array $form
 * @param unknown_type $form_state
 * @param int $form_id
 */
function limmudhelper_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'uc_cart_checkout_form') {
    // kpr($form);
    // kpr($_SESSION['limmud_ticket_data']);
    if (array_key_exists('limmud_ticket_data', $_SESSION)) {
      $form['panes']['billing']['address']['#default_value']->billing_first_name = $_SESSION['limmud_ticket_data']['keresztnev'];
      $form['panes']['billing']['address']['#default_value']->billing_last_name = $_SESSION['limmud_ticket_data']['vezeteknev'];
      $form['panes']['billing']['address']['#default_value']->billing_phone = $_SESSION['limmud_ticket_data']['telefonszam'];
      $form['panes']['comments']['comments']['#default_value'] = "Jelentkezés azonosító: ".$_SESSION['limmud_ticket_data']['submission_id'];
    }
  }
}

/**
 * 
 */
function _limmudhelper_webform_component_mapping($node) {
  $mapping = array();
  $components = $node->webform['components'];
  foreach ($components as $i => $component) {
    $key = $component['form_key'];
    $mapping[$key] = $i;
  }
  return $mapping;
}

